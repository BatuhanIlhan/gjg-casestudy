// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserWithRank is an object representing the database table.
type UserWithRank struct {
	ID          null.String  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Points      null.Float64 `boil:"points" json:"points,omitempty" toml:"points" yaml:"points,omitempty"`
	CountryCode null.String  `boil:"country_code" json:"country_code,omitempty" toml:"country_code" yaml:"country_code,omitempty"`
	DisplayName null.String  `boil:"display_name" json:"display_name,omitempty" toml:"display_name" yaml:"display_name,omitempty"`
	CreatedAt   null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time    `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Rank        null.Int64   `boil:"rank" json:"rank,omitempty" toml:"rank" yaml:"rank,omitempty"`
}

var UserWithRankColumns = struct {
	ID          string
	Points      string
	CountryCode string
	DisplayName string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Rank        string
}{
	ID:          "id",
	Points:      "points",
	CountryCode: "country_code",
	DisplayName: "display_name",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	Rank:        "rank",
}

var UserWithRankTableColumns = struct {
	ID          string
	Points      string
	CountryCode string
	DisplayName string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Rank        string
}{
	ID:          "user_with_rank.id",
	Points:      "user_with_rank.points",
	CountryCode: "user_with_rank.country_code",
	DisplayName: "user_with_rank.display_name",
	CreatedAt:   "user_with_rank.created_at",
	UpdatedAt:   "user_with_rank.updated_at",
	DeletedAt:   "user_with_rank.deleted_at",
	Rank:        "user_with_rank.rank",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserWithRankWhere = struct {
	ID          whereHelpernull_String
	Points      whereHelpernull_Float64
	CountryCode whereHelpernull_String
	DisplayName whereHelpernull_String
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
	Rank        whereHelpernull_Int64
}{
	ID:          whereHelpernull_String{field: "\"user_with_rank\".\"id\""},
	Points:      whereHelpernull_Float64{field: "\"user_with_rank\".\"points\""},
	CountryCode: whereHelpernull_String{field: "\"user_with_rank\".\"country_code\""},
	DisplayName: whereHelpernull_String{field: "\"user_with_rank\".\"display_name\""},
	CreatedAt:   whereHelpernull_Time{field: "\"user_with_rank\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"user_with_rank\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"user_with_rank\".\"deleted_at\""},
	Rank:        whereHelpernull_Int64{field: "\"user_with_rank\".\"rank\""},
}

var (
	userWithRankAllColumns            = []string{"id", "points", "country_code", "display_name", "created_at", "updated_at", "deleted_at", "rank"}
	userWithRankColumnsWithoutDefault = []string{}
	userWithRankColumnsWithDefault    = []string{"id", "points", "country_code", "display_name", "created_at", "updated_at", "deleted_at", "rank"}
	userWithRankPrimaryKeyColumns     = []string{}
	userWithRankGeneratedColumns      = []string{}
)

type (
	// UserWithRankSlice is an alias for a slice of pointers to UserWithRank.
	// This should almost always be used instead of []UserWithRank.
	UserWithRankSlice []*UserWithRank

	userWithRankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userWithRankType           = reflect.TypeOf(&UserWithRank{})
	userWithRankMapping        = queries.MakeStructMapping(userWithRankType)
	userWithRankInsertCacheMut sync.RWMutex
	userWithRankInsertCache    = make(map[string]insertCache)
	userWithRankUpdateCacheMut sync.RWMutex
	userWithRankUpdateCache    = make(map[string]updateCache)
	userWithRankUpsertCacheMut sync.RWMutex
	userWithRankUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

// One returns a single userWithRank record from the query.
func (q userWithRankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserWithRank, error) {
	o := &UserWithRank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for user_with_rank")
	}

	return o, nil
}

// All returns all UserWithRank records from the query.
func (q userWithRankQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserWithRankSlice, error) {
	var o []*UserWithRank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to UserWithRank slice")
	}

	return o, nil
}

// Count returns the count of all UserWithRank records in the query.
func (q userWithRankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count user_with_rank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userWithRankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if user_with_rank exists")
	}

	return count > 0, nil
}

// UserWithRanks retrieves all the records using an executor.
func UserWithRanks(mods ...qm.QueryMod) userWithRankQuery {
	mods = append(mods, qm.From("\"user_with_rank\""), qmhelper.WhereIsNull("\"user_with_rank\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_with_rank\".*"})
	}

	return userWithRankQuery{q}
}
